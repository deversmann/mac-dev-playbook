# code: language=ansible
---
- name: Configure host.
  hosts: all

  vars:
    msc_installs:
      - Cyberduck
      - GIMP
      - GitHubDesktop
      - GoogleDrive
      - GrandPerspective
      - Slack
      - TheUnarchiver
      - WindowsApp
      - Zoom.us

  tasks:
    - name: Configure passwordless sudo.
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/{{ ansible_user_id }}"
        create: true
        line: "{{ ansible_user_id }} ALL=(ALL) NOPASSWD: ALL"
        mode: '0640'
        validate: '/usr/sbin/visudo -cf %s'
      become: true

    # - name: Managed Software Center installs.
    #   ansible.builtin.import_role:
    #     name: deversmann.msc

    - name: Check for Homebrew in path.
      ansible.builtin.command: "which brew"
      register: homebrew_check
      changed_when: false
      failed_when: false

    - name: Message if Homebrew installation skipped.
      debug:
        msg: "Homebrew installation already exists.  Skipping install."
      when: homebrew_check.rc == 0

    - name: Homebrew installation. 
      # NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      block:
        - name: Fetch Homebrew installer.
          ansible.builtin.uri:
            url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
            return_content: true
          register: homebrew_installer

        - name: Run Homebrew installer.
          ansible.builtin.shell: |
            NONINTERACTIVE=1
            {{ homebrew_installer.content }}
          args:
            executable: /bin/bash
          register: homebrew_installation_output

        - name: Check for Homebrew prefix in /opt/homebrew
          ansible.builtin.set_fact:
            homebrew_prefix: "/opt/homebrew"
          when: '"/opt/homebrew/bin/brew" in homebrew_installation_output.stdout' 

        - name: Check for Homebrew prefix in /usr/local
          ansible.builtin.set_fact:
            homebrew_prefix: "/usr/local"
          when: '"/usr/local/bin/brew" in homebrew_installation_output.stdout'

        - name: Check for Homebrew prefix in /home/linuxbrew/.linuxbrew
          ansible.builtin.set_fact:
            homebrew_prefix: "/home/linuxbrew/.linuxbrew"
          when: '"/home/linuxbrew/.linuxbrew/bin/brew" in homebrew_installation_output.stdout'

        - name: Check that we found the installation.
          assert:
            that: 'homebrew_prefix is defined'
            fail_msg: "Homebrew not installed or installed to unknown location."
            success_msg: "Homebrew installation found at HOMEBREW_PREFIX={{ homebrew_prefix }}"

        - name: Check for Homebrew in path.
          ansible.builtin.command: "which brew"
          register: homebrew_check_2
          changed_when: false
          failed_when: false

        - name: Add Homebrew to .zprofile if 'brew' not already in path
          ansible.builtin.lineinfile:
            path: "~/.zprofile"
            create: true
            mode: '0644'
            regexp: "^eval \\$\\(.*/bin/brew shellenv\\)$"
            line: 'eval "$({{ homebrew_prefix }}/bin/brew shellenv)"'
          when: homebrew_check_2.rc != 0

      when: homebrew_check.rc != 0

    - name: Run Homebrew bundle.
      debug: 
        msg: "not implemented"
    #   ansible.builtin.command:
    #     cmd: brew bundle --global
    #   args:
    #     executable: /bin/bash

    - name: Message if OMZ installation skipped.
      debug:
        msg: "OMS installation already exists.  Skipping install."
      when: lookup('ansible.builtin.env', 'ZSH') | length > 0

    - name: Install OMZ.
      block:
        - name: Fetch OMZ installer.
          ansible.builtin.uri:
            url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            return_content: true
          register: omz_installer

        - name: Run OMZ installer.
          ansible.builtin.shell: |
            RUNZSH=no;
            CHSH=no;
            {{ omz_installer.content }}
          args:
            executable: /bin/sh
          register: omz_installation_output

        - debug: msg="{{ omz_installation_output.stdout }}"

      when: lookup('ansible.builtin.env', 'ZSH') | length == 0

    # - name: Configure OMZ custom and theme.
    #   debug:
    #     msg: "not implemented"

...